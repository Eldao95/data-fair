const testUtils = require('./resources/test-utils')
const { test, axiosBuilder } = testUtils.prepare(__filename)
const moment = require('moment')
require('moment-timezone')
const localeTimeZone = moment.tz.guess()

test.serial('Upload dataset in iCalendar format', async t => {
  const ax = await axiosBuilder('dmeadus0@answers.com:passwd')
  const dataset = await testUtils.sendDataset('calendar/calendar.ics', ax)
  t.is(dataset.count, 1)
  t.truthy(dataset.bbox)
  t.truthy(dataset.timePeriod)
  t.truthy(dataset.timePeriod.startDate)
  t.truthy(dataset.timePeriod.endDate)
  t.is(dataset.timeZone, localeTimeZone)
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/startDate'))
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/endDate'))
})

test.serial('Upload dataset in iCalendar format with X-WR-TIMEZONE param', async t => {
  const ax = await axiosBuilder('dmeadus0@answers.com:passwd')
  const dataset = await testUtils.sendDataset('calendar/calendar-xwr-timezone.ics', ax)
  t.is(dataset.count, 1)
  t.truthy(dataset.bbox)
  t.truthy(dataset.timePeriod)
  t.truthy(dataset.timePeriod.startDate)
  t.truthy(dataset.timePeriod.endDate)
  t.is(dataset.timeZone, 'America/New_York')
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/startDate'))
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/endDate'))
  const res = await ax.get(`/api/v1/datasets/${dataset.id}/lines`)
  t.is(moment(res.data.results[0].DTSTART).tz('America/New_York').format('YYYY-MM-DD-HH:mm'), '2008-02-12-00:00')
})

test.serial('Upload dataset in iCalendar format with VTIMEZONE param', async t => {
  const ax = await axiosBuilder('dmeadus0@answers.com:passwd')
  const dataset = await testUtils.sendDataset('calendar/calendar-vtimezone.ics', ax)
  t.is(dataset.count, 1)
  t.truthy(dataset.bbox)
  t.truthy(dataset.timePeriod)
  t.truthy(dataset.timePeriod.startDate)
  t.truthy(dataset.timePeriod.endDate)
  t.is(dataset.timeZone, 'America/Los_Angeles')
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/startDate'))
  t.truthy(dataset.schema.find(f => f['x-refersTo'] === 'https://schema.org/endDate'))
  const res = await ax.get(`/api/v1/datasets/${dataset.id}/lines`)
  t.is(moment(res.data.results[0].DTSTART).tz('America/Los_Angeles').format('YYYY-MM-DD-HH:mm'), '2008-02-12-00:00')
})

test.serial('Upload dataset with recurring event', async t => {
  const ax = await axiosBuilder('dmeadus0@answers.com:passwd')
  const dataset = await testUtils.sendDataset('calendar/calendar-rrule.ics', ax)
  t.is(dataset.count, 92)
  const res = await ax.get(`/api/v1/datasets/${dataset.id}/lines?sort=DTSTART`)
  t.true(res.data.results[0].DTSTART.startsWith('2008-'))
  t.true(res.data.results[1].DTSTART.startsWith('2009-'))
  t.true(res.data.results[2].DTSTART.startsWith('2010-'))
})
